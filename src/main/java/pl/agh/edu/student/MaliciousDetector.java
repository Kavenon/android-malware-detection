package pl.agh.edu.student;

import org.deeplearning4j.models.paragraphvectors.ParagraphVectors;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.NaiveBayes;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class MaliciousDetector {

    public int ngram = 2;
    public ArrayList<NGramSyscall> allPossibleNgrams = new ArrayList<>();
    public List<String> systCalls;
    ArrayList<LinkedList<SyscallLogRegistry>> learningFiles = new ArrayList();

    LinkedList<SyscallLogRegistry> bbc_c_c1;
    LinkedList<SyscallLogRegistry> bbc_c_h1;
    LinkedList<SyscallLogRegistry> bbc_c_h2;
    LinkedList<SyscallLogRegistry> bbc_m_h1;
    LinkedList<SyscallLogRegistry> bbc_m_h2;
    LinkedList<SyscallLogRegistry> calc_c_h1;
    LinkedList<SyscallLogRegistry> calc_c_h2;
    LinkedList<SyscallLogRegistry> calc_m_c1;
    LinkedList<SyscallLogRegistry> calc_m_h1;
    LinkedList<SyscallLogRegistry> calc_m_h2;
    LinkedList<SyscallLogRegistry> cana_c_h1;
    LinkedList<SyscallLogRegistry> cana_c_h2;
    LinkedList<SyscallLogRegistry> cana_m_h1;
    LinkedList<SyscallLogRegistry> cana_m_h2;

    ArrayList<LinkedList<SyscallLogRegistry>> testingFiles = new ArrayList();
    public boolean prepareTestingSet() {
        bbc_c_h1 = getSyscalls("bbc-clear-hot-1.log", LogStatus.GOOD, 0);
        bbc_m_h1 = getSyscalls("bbc-malware-hot-1.log", LogStatus.MALICIOUS, 0);
        calc_c_h2 = getSyscalls("calc-clear-hot-2.log", LogStatus.GOOD, 0);
        cana_c_h1 = getSyscalls("canary-clear-hot-1.log", LogStatus.GOOD, 0);
        cana_m_h2 = getSyscalls("canary-malware-hot-2.log", LogStatus.MALICIOUS, 0);
        calc_m_h2 = getSyscalls("calc-malware-hot-2.log", LogStatus.MALICIOUS, 0);
        cana_m_h1 = getSyscalls("canary-malware-hot-1.log", LogStatus.MALICIOUS, 0);

        testingFiles.add(bbc_c_h1);
        testingFiles.add(bbc_m_h1);
        testingFiles.add(calc_c_h2);
        testingFiles.add(cana_m_h2);
        testingFiles.add(cana_c_h1);
        testingFiles.add(cana_m_h2);
        testingFiles.add(calc_m_h2);

        return bbc_c_h1 != null && bbc_m_h1 != null && calc_c_h2 != null
                && cana_m_h2 != null && cana_c_h1 != null && cana_m_h2 != null && calc_m_h2 != null;
    }

    public boolean prepareLearningSet() {
        bbc_c_c1 = getSyscalls("bbc-clear-cold-1.log", LogStatus.GOOD, 0);
        calc_m_c1 = getSyscalls("calc-malware-cold-1.log", LogStatus.MALICIOUS, 0);
        bbc_c_h2 = getSyscalls("bbc-clear-hot-1.log", LogStatus.GOOD, 0);
        bbc_m_h2 = getSyscalls("bbc-malware-hot-2.log", LogStatus.MALICIOUS, 0);
        calc_c_h1 = getSyscalls("calc-clear-hot-1.log", LogStatus.GOOD, 0);
        cana_c_h2 = getSyscalls("canary-clear-hot-1.log", LogStatus.GOOD, 0);
        calc_m_h1 = getSyscalls("calc-malware-hot-1.log", LogStatus.MALICIOUS, 0);


        learningFiles.add(bbc_c_c1);
        learningFiles.add(calc_m_c1);
        learningFiles.add(bbc_c_h2);
        learningFiles.add(bbc_m_h2);
        learningFiles.add(calc_c_h1);
        learningFiles.add(cana_c_h2);
        learningFiles.add(calc_m_h1);

        return bbc_c_c1 != null && calc_m_c1 != null
                && bbc_c_h2 != null && bbc_m_h2 != null && calc_c_h1 != null && cana_c_h2 != null
                && calc_m_h1  != null;
    }

    public LinkedList<SyscallLogRegistry> getSyscalls(String fileName, LogStatus fileStatus, int maxElem) {
        try (Stream<String> syscalls = Files.lines(Paths.get(fileName))) {
            return SysCallLogReader.getSyscallsFromFile(syscalls, fileStatus, maxElem);
        } catch (IOException e) {
            System.out.print("Plik: " + fileName + " " + e.getMessage());
            return null;
        }
    }

    public void createSyscallsList(){
        ArrayList<SyscallLogRegistry> allSyscallsRegistry = new ArrayList<>();
        allSyscallsRegistry.addAll(bbc_c_c1);
        allSyscallsRegistry.addAll(bbc_c_h1);
        allSyscallsRegistry.addAll(bbc_c_h2);
        allSyscallsRegistry.addAll(bbc_m_h1);
        allSyscallsRegistry.addAll(bbc_m_h2);
        allSyscallsRegistry.addAll(calc_c_h1);
        allSyscallsRegistry.addAll(calc_c_h2);
        allSyscallsRegistry.addAll(calc_m_c1);
        allSyscallsRegistry.addAll(calc_m_h1);
        allSyscallsRegistry.addAll(calc_m_h2);
        allSyscallsRegistry.addAll(cana_c_h1);
        allSyscallsRegistry.addAll(cana_c_h2);
        allSyscallsRegistry.addAll(cana_m_h1);
        allSyscallsRegistry.addAll(cana_m_h2);

        systCalls = allSyscallsRegistry.stream()
                .map(p -> p.getSyscall())
                .distinct()
                .collect(Collectors.toList());
    }


    public void startNgramsPossibilitiesInit()
    {
        int sysCallsNumber = systCalls.size();
        allPossibleNgrams = new ArrayList<>();

        for(int i=0;i < Math.pow(sysCallsNumber, ngram); i++)
        {
            allPossibleNgrams.add(new NGramSyscall(null, new LinkedList<SyscallLogRegistry>()));
        }

        fillSysCalsPossibilities(allPossibleNgrams, ngram, 0);
    }

    private void fillSysCalsPossibilities(ArrayList<NGramSyscall> allPossibleNgrams, int ngram, int offset) {
        int sysCallsNumber = systCalls.size();
        int numberOfSameSyscalls = (int)Math.pow(sysCallsNumber, ngram-1);
        for(int i=0;i<sysCallsNumber;i++)
        {
            for(int j=0;j<numberOfSameSyscalls;j++)
            {
                allPossibleNgrams.get(offset + i*numberOfSameSyscalls + j).getnGramSyscalls()
                        .add(new SyscallLogRegistry(systCalls.get(i), null));
            }

            if(ngram > 1)
            {
                fillSysCalsPossibilities(allPossibleNgrams, ngram-1, offset+i*numberOfSameSyscalls);
            }
        }
    }

    public ArrayList<NGramSyscall> createNGramsFromList(LinkedList<SyscallLogRegistry> sysCalls, int nGramSize)
    {
        ArrayList<NGramSyscall> result = new ArrayList<>();
        LinkedList<SyscallLogRegistry> tmpSysCalls = (LinkedList<SyscallLogRegistry>)sysCalls.clone();
        while(tmpSysCalls.size() >= nGramSize)
        {
            LinkedList<SyscallLogRegistry> nGramSyscalls = new LinkedList<>();
            for(int i=0; i < nGramSize;i++) {
                nGramSyscalls.add(tmpSysCalls.removeFirst());
            }
            result.add(new NGramSyscall(nGramSyscalls.getFirst().getSourceLogFileStatus(), nGramSyscalls));
        }
        return result;
    }

    public void prepareVectorAndLearnWithData() {
        try {
            createSyscallsList();
            startNgramsPossibilitiesInit();

            ArrayList<Attribute> fvWekaAttributes = createAttributeHeading();

            Instances isTrainingSet = new Instances("Rel", fvWekaAttributes, 10);
            isTrainingSet.setClassIndex(allPossibleNgrams.size());

            learnTrainingSet(isTrainingSet, fvWekaAttributes);

            Classifier cModel = new NaiveBayes();
            cModel.buildClassifier(isTrainingSet);

            int testFileCounter = 1;
            for(LinkedList<SyscallLogRegistry> testingFile : testingFiles)
            {
                Instance testingInstance = createTestingInstance(testingFile, fvWekaAttributes);
                testingInstance.setDataset(isTrainingSet);
                double[] fDistribution = cModel.distributionForInstance(testingInstance);
                int i = 0;
                System.out.println("Plik numer " + testFileCounter);
                System.out.println("Faktyczny stan aplikacji: " + testingFile.get(0).getSourceLogFileStatus());
                System.out.println("Przewidywania modelu - nie zarażona: " + fDistribution[0] + ", zarażona: " + fDistribution[1]);
                testFileCounter++;
            }
        } catch (Exception e) {
            System.out.print(e.getMessage());
            return;
        }
    }

    private Instance createTestingInstance(LinkedList<SyscallLogRegistry> testingFile, ArrayList<Attribute> fvWekaAttributes) {
        List<Double> frequencyVector = getFrequencyVector(testingFile);

        return createTestingSet(frequencyVector, fvWekaAttributes);
    }

    private Instance createTestingSet(List<Double> frequencyVector, ArrayList<Attribute> fvWekaAttributes) {
        Instance iExample = new DenseInstance(allPossibleNgrams.size());
        for (int i = 0; i < allPossibleNgrams.size(); i++) {
            iExample.setValue(fvWekaAttributes.get(i), frequencyVector.get(i));
        }

        return iExample;
    }

    private void learnTrainingSet(Instances isTrainingSet, ArrayList<Attribute> fvWekaAttributes) {
        for(LinkedList<SyscallLogRegistry> learningFile : learningFiles){
            List<Double> frequencyVector = getFrequencyVector(learningFile);
            LogStatus logStatus = learningFile.get(0).getSourceLogFileStatus();
            String className = (logStatus == LogStatus.GOOD ? "clear" : "malicious");
            Instance learingSet = createLearningSet(frequencyVector, fvWekaAttributes, className);
            isTrainingSet.add(learingSet);
        }
    }

    private Instance createLearningSet(List<Double> frequencyVector, ArrayList<Attribute> fvWekaAttributes, String logClass) {
        Instance iExample = new DenseInstance(allPossibleNgrams.size() + 1);
        for (int i = 0; i < allPossibleNgrams.size(); i++) {
            iExample.setValue(fvWekaAttributes.get(i), frequencyVector.get(i));
        }
        iExample.setValue(fvWekaAttributes.get(allPossibleNgrams.size()), logClass);

        return iExample;
    }

    public ArrayList<Attribute> createAttributeHeading() {
        ArrayList<Attribute> fvWekaAttributes = new ArrayList<Attribute>();

        ArrayList<String> fvClassVal = new ArrayList<String>();
        fvClassVal.add("clear");
        fvClassVal.add("malicious");
        Attribute classAttribute = new Attribute("theClass", fvClassVal);

        for (int i = 0; i < allPossibleNgrams.size(); i++) {
            fvWekaAttributes.add(new Attribute("Atrybut " + i));
        }
        fvWekaAttributes.add(classAttribute);
        return fvWekaAttributes;
    }

    private List<Double> getFrequencyVector(LinkedList<SyscallLogRegistry> sysCallsLogs) {
        ArrayList<NGramSyscall> ngramList = createNGramsFromList(sysCallsLogs, ngram);

        ArrayList<NGramSyscall> ngramOccurenceForVector = (ArrayList<NGramSyscall>) allPossibleNgrams.clone();
        fillNgramOccurance(ngramList, ngramOccurenceForVector);
        setFrequency(ngramOccurenceForVector, ngramList.size());

        return createFrequencyVector(ngramOccurenceForVector);
    }

    public List<Double> createFrequencyVector(ArrayList<NGramSyscall> ngramOccurenceForVector) {
        return ngramOccurenceForVector.stream().map(p -> p.frequency).collect(Collectors.toList());
    }

    public void setFrequency(ArrayList<NGramSyscall> ngramOccurenceForVector, double size) {
        for(NGramSyscall syscall : ngramOccurenceForVector)
        {
            syscall.frequency = syscall.numberOfOccurences / size;
        }
    }

    public void fillNgramOccurance(ArrayList<NGramSyscall> ngramList, ArrayList<NGramSyscall> ngramOccurenceForVector) {
        for(NGramSyscall syscall : ngramList)
        {
            increaseOccuranceForNgram(syscall, ngramOccurenceForVector);
        }
    }

    public void increaseOccuranceForNgram(NGramSyscall syscall, ArrayList<NGramSyscall> ngramOccurenceForVector) {
        for(NGramSyscall vectorSyscall : ngramOccurenceForVector)
        {
            if(checkIfSameSysCalls(syscall, vectorSyscall))
            {
                vectorSyscall.numberOfOccurences++;
            }
        }
    }

    public boolean checkIfSameSysCalls(NGramSyscall syscall, NGramSyscall vectorSyscall) {
        if(syscall.getnGramSyscalls().size() != vectorSyscall.getnGramSyscalls().size())
            return false;

        for(int i=0;i<syscall.getnGramSyscalls().size();i++)
        {
            if(!syscall.getnGramSyscalls().get(i).getSyscall().equals(vectorSyscall.getnGramSyscalls().get(i).getSyscall()))
                return false;
        }

        return true;
    }

}
