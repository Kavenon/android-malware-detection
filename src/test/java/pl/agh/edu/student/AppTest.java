package pl.agh.edu.student;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Test;
import sun.awt.image.ImageWatched;
import weka.core.Attribute;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

/**
 * Unit test for simple App.
 */
public class AppTest {
    @Test
    public void test_startNgramsPossibilitiesInit() {
        MaliciousDetector mDet = new MaliciousDetector();
        mDet.systCalls = Arrays.asList("test1", "test2");

        mDet.startNgramsPossibilitiesInit();

        assertTrue(mDet.allPossibleNgrams.size() == 4 &&
                mDet.allPossibleNgrams.get(0).getnGramSyscalls().get(0).getSyscall().equals("test1") &&
                mDet.allPossibleNgrams.get(0).getnGramSyscalls().get(1).getSyscall().equals("test1") &&
                mDet.allPossibleNgrams.get(1).getnGramSyscalls().get(0).getSyscall().equals("test1") &&
                mDet.allPossibleNgrams.get(1).getnGramSyscalls().get(1).getSyscall().equals("test2") &&
                mDet.allPossibleNgrams.get(2).getnGramSyscalls().get(0).getSyscall().equals("test2") &&
                mDet.allPossibleNgrams.get(2).getnGramSyscalls().get(1).getSyscall().equals("test1") &&
                mDet.allPossibleNgrams.get(3).getnGramSyscalls().get(0).getSyscall().equals("test2") &&
                mDet.allPossibleNgrams.get(3).getnGramSyscalls().get(1).getSyscall().equals("test2"));
    }

    @Test
    public void test_createNGramsFromList() {
        MaliciousDetector mDet = new MaliciousDetector();
        LinkedList<SyscallLogRegistry> logs = new LinkedList<>();
        logs.add(new SyscallLogRegistry("test1", null));
        logs.add(new SyscallLogRegistry("test2", null));
        logs.add(new SyscallLogRegistry("test3", null));
        logs.add(new SyscallLogRegistry("test4", null));
        logs.add(new SyscallLogRegistry("test5", null));

        ArrayList<NGramSyscall> ngrams = mDet.createNGramsFromList(logs, 2);

        if (ngrams.size() != 2)
            fail();

        assertTrue(ngrams.get(0).getnGramSyscalls().get(0).getSyscall().equals("test1") &&
                ngrams.get(0).getnGramSyscalls().get(1).getSyscall().equals("test2") &&
                ngrams.get(1).getnGramSyscalls().get(0).getSyscall().equals("test3") &&
                ngrams.get(1).getnGramSyscalls().get(1).getSyscall().equals("test4"));
    }

    @Test
    public void test_checkIfSameSysCalls() {
        MaliciousDetector mDet = new MaliciousDetector();
        LinkedList<SyscallLogRegistry> sysCallReg1 = new LinkedList<>();
        sysCallReg1.add(new SyscallLogRegistry("test1", null));
        sysCallReg1.add(new SyscallLogRegistry("test2", null));
        LinkedList<SyscallLogRegistry> sysCallReg2 = new LinkedList<>();
        sysCallReg2.add(new SyscallLogRegistry("test1", null));
        sysCallReg2.add(new SyscallLogRegistry("test2", null));
        NGramSyscall sys1 = new NGramSyscall(null, sysCallReg1);
        NGramSyscall sys2 = new NGramSyscall(null, sysCallReg2);
        assertTrue(mDet.checkIfSameSysCalls(sys1, sys2));
    }

    @Test
    public void test_increaseOccuranceForNgram() {
        MaliciousDetector mDet = new MaliciousDetector();
        LinkedList<SyscallLogRegistry> sysCallReg1 = new LinkedList<>();
        sysCallReg1.add(new SyscallLogRegistry("test1", null));
        sysCallReg1.add(new SyscallLogRegistry("test2", null));
        LinkedList<SyscallLogRegistry> sysCallReg2 = new LinkedList<>();
        sysCallReg2.add(new SyscallLogRegistry("test4", null));
        sysCallReg2.add(new SyscallLogRegistry("test5", null));
        LinkedList<SyscallLogRegistry> sysCallReg3 = new LinkedList<>();
        sysCallReg3.add(new SyscallLogRegistry("test1", null));
        sysCallReg3.add(new SyscallLogRegistry("test2", null));
        NGramSyscall sys1 = new NGramSyscall(null, sysCallReg1);
        NGramSyscall sys2 = new NGramSyscall(null, sysCallReg2);
        NGramSyscall sys3 = new NGramSyscall(null, sysCallReg3);
        ArrayList<NGramSyscall> occuranceList = new ArrayList<>();
        occuranceList.add(sys2);
        occuranceList.add(sys3);
        mDet.increaseOccuranceForNgram(sys1, occuranceList);
        assertTrue(occuranceList.get(1).numberOfOccurences == 1);
    }

    @Test
    public void test_setFrequency() {
        MaliciousDetector mDet = new MaliciousDetector();
        NGramSyscall sys1 = new NGramSyscall(null, null);
        NGramSyscall sys2 = new NGramSyscall(null, null);
        NGramSyscall sys3 = new NGramSyscall(null, null);
        sys1.numberOfOccurences = 5;
        sys2.numberOfOccurences = 2;
        sys3.numberOfOccurences = 3;
        ArrayList<NGramSyscall> occuranceList = new ArrayList<>();
        occuranceList.add(sys1);
        occuranceList.add(sys2);
        occuranceList.add(sys3);
        mDet.setFrequency(occuranceList, 10);
        assertTrue(occuranceList.get(0).frequency == 0.5 &&
                occuranceList.get(1).frequency == 0.2 &&
                occuranceList.get(2).frequency == 0.3);
    }


    @Test
    public void test_createFrequencyVector() {
        MaliciousDetector mDet = new MaliciousDetector();
        NGramSyscall sys1 = new NGramSyscall(null, null);
        NGramSyscall sys2 = new NGramSyscall(null, null);
        NGramSyscall sys3 = new NGramSyscall(null, null);
        sys1.frequency = 0.5;
        sys2.frequency = 0.2;
        sys3.frequency = 0.3;
        ArrayList<NGramSyscall> occuranceList = new ArrayList<>();
        occuranceList.add(sys1);
        occuranceList.add(sys2);
        occuranceList.add(sys3);
        List<Double> frequencyList = mDet.createFrequencyVector(occuranceList);

        if(frequencyList.size() != 3)
            fail();

        assertTrue(frequencyList.get(0) == 0.5 &&
                frequencyList.get(1) == 0.2 &&
                frequencyList.get(2) == 0.3);
    }

    @Test
    public void test_createAttributeHeading() {
        MaliciousDetector mDet = new MaliciousDetector();
        mDet.allPossibleNgrams = new ArrayList<>();
        mDet.allPossibleNgrams.add(new NGramSyscall());
        mDet.allPossibleNgrams.add(new NGramSyscall());
        ArrayList<Attribute> attributes = mDet.createAttributeHeading();

        if(attributes.size() != 3)
            fail();

        assertTrue(attributes.get(2).value(0).equals("clear") &&
                attributes.get(2).value(1).equals("malicious"));
    }

}
